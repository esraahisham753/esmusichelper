% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_chords_notes_and_rests.R
\name{detect_chords_notes_and_rests}
\alias{detect_chords_notes_and_rests}
\title{Detect Chords, Notes, and Rests from MIDI Information}
\usage{
detect_chords_notes_and_rests(midi_info, max_time_diff = 10)
}
\arguments{
\item{midi_info}{A list containing two data frames:
\itemize{
\item \code{note_on_events}: Data frame with note-on events, where each row contains
the \code{time} (timestamp) and \code{parameter1} (MIDI note number).
\item \code{note_off_events}: Data frame with note-off events, where each row contains
the \code{time} (timestamp) and \code{parameter1} (MIDI note number).
}}

\item{max_time_diff}{Numeric. The maximum time difference (in ticks) allowed
to consider notes as part of the same chord. Default is 10.}
}
\value{
A data frame with two columns:
\itemize{
\item \code{timestamp}: The timestamp (in ticks) of each note/chord/rest.
\item \code{note}: The corresponding note name or "r" for rests. Chords are represented
as a list of note names.
}
}
\description{
This function processes MIDI information to detect chords, individual notes,
and rests based on the timing of note-on and note-off events. It groups notes
that are played close together in time into chords and identifies rests based
on gaps between notes.
}
\examples{
midi_info <- list(
  note_on_events = data.frame(time = c(0, 5, 15, 20), parameter1 = c(60, 64, 62, 60)),
  note_off_events = data.frame(time = c(10, 15, 20, 25), parameter1 = c(60, 64, 62, 60))
)
returns the notes and rests for each timestamp
}
